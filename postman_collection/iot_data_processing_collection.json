{
  "info": {
    "name": "IoT Data Processing API",
    "_postman_id": "a1b2c3d4-5678-90ab-cdef-1234567890ab",
    "description": "Collection to test IoT Data Processing endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000/api",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "your_sample_token_here",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Ingest Sensor Data",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"timestamp\": \"2023-05-10T12:00:00Z\",\n  \"temperature\": 22.5,\n  \"humidity\": 60.0,\n  \"air_quality\": 55.0\n}"
        },
        "url": {
          "raw": "{{base_url}}/sensors/data/",
          "host": ["{{base_url}}"],
          "path": ["sensors", "data", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "pm.test(\"Response is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "pm.test(\"Response body is not empty\", function () {",
              "    pm.expect(pm.response.text()).to.not.be.empty;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Fetch Processed Data",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/sensors/processed/",
          "host": ["{{base_url}}"],
          "path": ["sensors", "processed", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "pm.test(\"Response is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "pm.test(\"Response body is not empty\", function () {",
              "    pm.expect(pm.response.text()).to.not.be.empty;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Fetch Aggregated Statistics",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/sensors/aggregated/?window=1H",
          "host": ["{{base_url}}"],
          "path": ["sensors", "aggregated", ""],
          "query": [
            {
              "key": "window",
              "value": "1H"
            }
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "pm.test(\"Response is JSON\", function () {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});",
              "",
              "pm.test(\"Response body is not empty\", function () {",
              "    pm.expect(pm.response.text()).to.not.be.empty;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
